//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherOrbitRadius;

    public static Entitas.IMatcher<GameEntity> OrbitRadius {
        get {
            if (_matcherOrbitRadius == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.OrbitRadius);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherOrbitRadius = matcher;
            }

            return _matcherOrbitRadius;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Movement.OrbitRadius orbitRadius { get { return (Code.Gameplay.Features.Movement.OrbitRadius)GetComponent(GameComponentsLookup.OrbitRadius); } }
    public float OrbitRadius { get { return orbitRadius.Value; } }
    public bool hasOrbitRadius { get { return HasComponent(GameComponentsLookup.OrbitRadius); } }

    public GameEntity AddOrbitRadius(float newValue) {
        var index = GameComponentsLookup.OrbitRadius;
        var component = (Code.Gameplay.Features.Movement.OrbitRadius)CreateComponent(index, typeof(Code.Gameplay.Features.Movement.OrbitRadius));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceOrbitRadius(float newValue) {
        var index = GameComponentsLookup.OrbitRadius;
        var component = (Code.Gameplay.Features.Movement.OrbitRadius)CreateComponent(index, typeof(Code.Gameplay.Features.Movement.OrbitRadius));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveOrbitRadius() {
        RemoveComponent(GameComponentsLookup.OrbitRadius);
        return this;
    }
}
