//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherProducerId;

    public static Entitas.IMatcher<GameEntity> ProducerId {
        get {
            if (_matcherProducerId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ProducerId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherProducerId = matcher;
            }

            return _matcherProducerId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Effects.ProducerId producerId { get { return (Code.Gameplay.Features.Effects.ProducerId)GetComponent(GameComponentsLookup.ProducerId); } }
    public int ProducerId { get { return producerId.Value; } }
    public bool hasProducerId { get { return HasComponent(GameComponentsLookup.ProducerId); } }

    public GameEntity AddProducerId(int newValue) {
        var index = GameComponentsLookup.ProducerId;
        var component = (Code.Gameplay.Features.Effects.ProducerId)CreateComponent(index, typeof(Code.Gameplay.Features.Effects.ProducerId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceProducerId(int newValue) {
        var index = GameComponentsLookup.ProducerId;
        var component = (Code.Gameplay.Features.Effects.ProducerId)CreateComponent(index, typeof(Code.Gameplay.Features.Effects.ProducerId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveProducerId() {
        RemoveComponent(GameComponentsLookup.ProducerId);
        return this;
    }
}
