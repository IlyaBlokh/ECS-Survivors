//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherBaseStats;

    public static Entitas.IMatcher<GameEntity> BaseStats {
        get {
            if (_matcherBaseStats == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.BaseStats);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherBaseStats = matcher;
            }

            return _matcherBaseStats;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.CharacterStats.BaseStats baseStats { get { return (Code.Gameplay.Features.CharacterStats.BaseStats)GetComponent(GameComponentsLookup.BaseStats); } }
    public System.Collections.Generic.Dictionary<Code.Gameplay.Features.CharacterStats.Stats, float> BaseStats { get { return baseStats.Value; } }
    public bool hasBaseStats { get { return HasComponent(GameComponentsLookup.BaseStats); } }

    public GameEntity AddBaseStats(System.Collections.Generic.Dictionary<Code.Gameplay.Features.CharacterStats.Stats, float> newValue) {
        var index = GameComponentsLookup.BaseStats;
        var component = (Code.Gameplay.Features.CharacterStats.BaseStats)CreateComponent(index, typeof(Code.Gameplay.Features.CharacterStats.BaseStats));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceBaseStats(System.Collections.Generic.Dictionary<Code.Gameplay.Features.CharacterStats.Stats, float> newValue) {
        var index = GameComponentsLookup.BaseStats;
        var component = (Code.Gameplay.Features.CharacterStats.BaseStats)CreateComponent(index, typeof(Code.Gameplay.Features.CharacterStats.BaseStats));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveBaseStats() {
        RemoveComponent(GameComponentsLookup.BaseStats);
        return this;
    }
}
