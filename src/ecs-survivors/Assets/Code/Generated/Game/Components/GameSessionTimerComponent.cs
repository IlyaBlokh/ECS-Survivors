//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSessionTimer;

    public static Entitas.IMatcher<GameEntity> SessionTimer {
        get {
            if (_matcherSessionTimer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SessionTimer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSessionTimer = matcher;
            }

            return _matcherSessionTimer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.GameSession.SessionTimer sessionTimer { get { return (Code.Gameplay.Features.GameSession.SessionTimer)GetComponent(GameComponentsLookup.SessionTimer); } }
    public float SessionTimer { get { return sessionTimer.Value; } }
    public bool hasSessionTimer { get { return HasComponent(GameComponentsLookup.SessionTimer); } }

    public GameEntity AddSessionTimer(float newValue) {
        var index = GameComponentsLookup.SessionTimer;
        var component = (Code.Gameplay.Features.GameSession.SessionTimer)CreateComponent(index, typeof(Code.Gameplay.Features.GameSession.SessionTimer));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSessionTimer(float newValue) {
        var index = GameComponentsLookup.SessionTimer;
        var component = (Code.Gameplay.Features.GameSession.SessionTimer)CreateComponent(index, typeof(Code.Gameplay.Features.GameSession.SessionTimer));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSessionTimer() {
        RemoveComponent(GameComponentsLookup.SessionTimer);
        return this;
    }
}
